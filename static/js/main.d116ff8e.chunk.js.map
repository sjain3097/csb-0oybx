{"version":3,"sources":["Create.js","Tasks.js","Reducer.js","App.js","index.js"],"names":["CreateTask","useState","task","setTask","dispatch","useDispatch","className","value","onChange","e","target","type","class","onClick","payload","Tasks","status","headerTitle","tasks","useSelector","state","toLowerCase","style","taskContainer","onDrop","getAttribute","dropLocation","replace","draggedTask","JSON","parse","dataTransfer","getData","handleOnDrop","onDragOver","preventDefault","header","map","draggable","onDragStart","label","innerHTML","setData","stringify","handleOnDragStart","width","border","marginRight","backgroundColor","color","initialState","new","active","completed","appReducer","action","push","filter","App","store","createStore","display","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d116ff8e.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function CreateTask() {\r\n  const [task, setTask] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"input-group input-group-sm m-3\">\r\n      <input\r\n        value={task}\r\n        onChange={(e) => {\r\n          setTask(e.target.value);\r\n        }}\r\n        type=\"text\"\r\n      />\r\n      <div class=\"input-group-append\">\r\n        <button\r\n          className=\"btn btn-primary btn-sm active\"\r\n          onClick={() => {\r\n            if (task !== \"\") {\r\n              dispatch({ type: \"ADD\", payload: { task } });\r\n              setTask(\"\");\r\n            }\r\n          }}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport const Tasks = ({ status }) => {\r\n  const headerTitle =\r\n    status === \"NEW\" ? \"NEW\" : status === \"ACTIVE\" ? \"ACTIVE\" : \"COMPLETED\";\r\n  const tasks = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const handleOnDrop = (e) => {\r\n    let target = e.target.getAttribute(\"class\");\r\n    if (!target) return;\r\n    let dropLocation = target.replace(\"Container\", \"\");\r\n    let draggedTask = JSON.parse(e.dataTransfer.getData(\"draggedTask\"));\r\n    if (dropLocation !== draggedTask.status) {\r\n      dispatch({\r\n        type: \"MOVE\",\r\n        payload: { draggedTask, dropLocation: dropLocation }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOnDragStart = (e) => {\r\n    let label = e.target.innerHTML;\r\n    let status = e.target.getAttribute(\"class\");\r\n    e.dataTransfer.setData(\"draggedTask\", JSON.stringify({ label, status }));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${status.toLowerCase()}Container`}\r\n      style={style.taskContainer}\r\n      onDrop={(e) => {\r\n        handleOnDrop(e);\r\n      }}\r\n      onDragOver={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div className=\"list-group\">\r\n        <div style={style.header}>{headerTitle}</div>\r\n        {tasks[status.toLowerCase()].map((task) => (\r\n          <div className=\"list-group-item-success m-1 border border-success\">\r\n            <div\r\n              className={status.toLowerCase()}\r\n              draggable\r\n              onDragStart={(e) => {\r\n                handleOnDragStart(e);\r\n              }}\r\n            >\r\n              {task.label}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst style = {\r\n  taskContainer: {\r\n    width: \"33.32%\",\r\n    border: \"1px solid \",\r\n    marginRight: \"0.1%\"\r\n  },\r\n  header: {\r\n    border: \"1px solid \",\r\n    backgroundColor: \"#212529\",\r\n    color: \"white\"\r\n  }\r\n};\r\n","const initialState = {\r\n  new: [{ label: \"New task1\" }],\r\n  active: [{ label: \"Active task1\" }],\r\n  completed: [{ label: \"completed1\" }, { label: \"completed2\" }]\r\n};\r\nexport const appReducer = (state = initialState, action) => {\r\n  const tasks = { ...state };\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      const { task } = action.payload;\r\n      tasks.new.push({ label: task });\r\n      return tasks;\r\n    case \"MOVE\":\r\n      const { dropLocation, draggedTask } = action.payload;\r\n      if (tasks[dropLocation]) {\r\n        tasks[dropLocation].push({ label: draggedTask.label });\r\n        tasks[draggedTask.status] = tasks[draggedTask.status].filter(\r\n          (task) => task.label !== draggedTask.label\r\n        );\r\n      }\r\n      return tasks;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import \"./styles.css\";\nimport CreateTask from \"./Create\";\nimport { Tasks } from \"./Tasks\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { createStore } from \"redux\";\nimport { appReducer } from \"./Reducer\";\nimport { Provider } from \"react-redux\";\n\nexport default function App() {\n  const store = createStore(appReducer);\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <CreateTask />\n        <div style={{ display: \"flex\" }}>\n          <Tasks status=\"NEW\" />\n          <Tasks status=\"ACTIVE\" />\n          <Tasks status=\"COMPLETED\" />\n        </div>\n      </Provider>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}